1.阻塞IO:全程阻塞

2.非阻塞IO:
        发送多次系统调用:
            优点:获取数据使无阻塞
            缺点:1.系统调用太多
                 2.数据不是实时接受的
            两个阶段:调用时非阻塞
                     获取数据使阻塞
3.IO多路复用
IO多路复用实现机制
win:    select
linux: select poll epoll

select的缺点:
    1.每次调用select都要将所有的fd(文件描述符)拷贝到内核空间
      导致效率下降
    2.select每次检查都遍历所有的fd,是否有数据访问.(最重要的问题)
    3.最大连接数(1024),超过将不在监听

poll:改进select最大连接数没有限制

epoll:select.select(inputs, [], [])
    1.第一个函数:创建epoll句柄:将所有的fd拷贝到内空间去,但只拷贝一次
    2.遍历是通过 回调函数:某一个函数或者某一个动作成功后会触发的函数
                          为所有的fd绑定一个回调函数,一但有数据访问,
                          触发该回调函数将fd放到链表中
    3.第三个函数 判断列表是否为空
    4.最大连接数没有上线(理论)
selectors模块会自动选择最佳实现方式(select poll epoll)

